      SUBROUTINE SMATRIX1(P,ANS)
C     
C     Generated by MadGraph5_aMC@NLO v. 2.6.1, 2017-12-12
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     MadGraph5_aMC@NLO for Madevent Version
C     
C     Returns amplitude squared summed/avg over colors
C     and helicities
C     for the point in phase space P(0:3,NEXTERNAL)
C     
C     Process: xd xd~ > w- w+ h h z DMS<=2 WEIGHTED<=10 @4
C     
      USE DISCRETESAMPLER
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INCLUDE 'genps.inc'
      INCLUDE 'maxconfigs.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER                 NCOMB
      PARAMETER (             NCOMB=108)
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=189)
      INTEGER    NDIAGS
      PARAMETER (NDIAGS=189)
      INTEGER    THEL
      PARAMETER (THEL=2*NCOMB)
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL),ANS
C     
C     global (due to reading writting) 
C     
      LOGICAL GOODHEL(NCOMB,2)
      INTEGER NTRY(2)
      COMMON/BLOCK_GOODHEL/NTRY,GOODHEL
C     
C     LOCAL VARIABLES 
C     
      INTEGER NHEL(NEXTERNAL,NCOMB)
      INTEGER ISHEL(2)
      REAL*8 T,MATRIX1
      REAL*8 R,SUMHEL,TS(NCOMB)
      INTEGER I,IDEN
      INTEGER JC(NEXTERNAL),II
      REAL*8 HWGT, XTOT, XTRY, XREJ, XR, YFRAC(0:NCOMB)
      INTEGER NGOOD(2), IGOOD(NCOMB,2)
      INTEGER JHEL(2), J, JJ
      INTEGER THIS_NTRY(2)
      SAVE THIS_NTRY
      DATA THIS_NTRY /0,0/
C     This is just to temporarily store the reference grid for
C      helicity of the DiscreteSampler so as to obtain its number of
C      entries with ref_helicity_grid%n_tot_entries
      TYPE(SAMPLEDDIMENSION) REF_HELICITY_GRID
C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2

      CHARACTER*101         HEL_BUFF
      COMMON/TO_HELICITY/  HEL_BUFF

      INTEGER IMIRROR
      COMMON/TO_MIRROR/ IMIRROR

      REAL*8 POL(2)
      COMMON/TO_POLARIZATION/ POL

      INTEGER          ISUM_HEL
      LOGICAL                    MULTI_CHANNEL
      COMMON/TO_MATRIX/ISUM_HEL, MULTI_CHANNEL
      INTEGER MAPCONFIG(0:LMAXCONFIGS), ICONFIG
      COMMON/TO_MCONFIGS/MAPCONFIG, ICONFIG
      INTEGER SUBDIAG(MAXSPROC),IB(2)
      COMMON/TO_SUB_DIAG/SUBDIAG,IB
      DATA XTRY, XREJ /0,0/
      DATA NGOOD /0,0/
      DATA ISHEL/0,0/
      SAVE YFRAC, IGOOD, JHEL
      DATA (NHEL(I,   1),I=1,7) / 1,-1, 1,-1, 0, 0,-1/
      DATA (NHEL(I,   2),I=1,7) / 1,-1, 1,-1, 0, 0, 0/
      DATA (NHEL(I,   3),I=1,7) / 1,-1, 1,-1, 0, 0, 1/
      DATA (NHEL(I,   4),I=1,7) / 1,-1, 1, 0, 0, 0,-1/
      DATA (NHEL(I,   5),I=1,7) / 1,-1, 1, 0, 0, 0, 0/
      DATA (NHEL(I,   6),I=1,7) / 1,-1, 1, 0, 0, 0, 1/
      DATA (NHEL(I,   7),I=1,7) / 1,-1, 1, 1, 0, 0,-1/
      DATA (NHEL(I,   8),I=1,7) / 1,-1, 1, 1, 0, 0, 0/
      DATA (NHEL(I,   9),I=1,7) / 1,-1, 1, 1, 0, 0, 1/
      DATA (NHEL(I,  10),I=1,7) / 1,-1, 0,-1, 0, 0,-1/
      DATA (NHEL(I,  11),I=1,7) / 1,-1, 0,-1, 0, 0, 0/
      DATA (NHEL(I,  12),I=1,7) / 1,-1, 0,-1, 0, 0, 1/
      DATA (NHEL(I,  13),I=1,7) / 1,-1, 0, 0, 0, 0,-1/
      DATA (NHEL(I,  14),I=1,7) / 1,-1, 0, 0, 0, 0, 0/
      DATA (NHEL(I,  15),I=1,7) / 1,-1, 0, 0, 0, 0, 1/
      DATA (NHEL(I,  16),I=1,7) / 1,-1, 0, 1, 0, 0,-1/
      DATA (NHEL(I,  17),I=1,7) / 1,-1, 0, 1, 0, 0, 0/
      DATA (NHEL(I,  18),I=1,7) / 1,-1, 0, 1, 0, 0, 1/
      DATA (NHEL(I,  19),I=1,7) / 1,-1,-1,-1, 0, 0,-1/
      DATA (NHEL(I,  20),I=1,7) / 1,-1,-1,-1, 0, 0, 0/
      DATA (NHEL(I,  21),I=1,7) / 1,-1,-1,-1, 0, 0, 1/
      DATA (NHEL(I,  22),I=1,7) / 1,-1,-1, 0, 0, 0,-1/
      DATA (NHEL(I,  23),I=1,7) / 1,-1,-1, 0, 0, 0, 0/
      DATA (NHEL(I,  24),I=1,7) / 1,-1,-1, 0, 0, 0, 1/
      DATA (NHEL(I,  25),I=1,7) / 1,-1,-1, 1, 0, 0,-1/
      DATA (NHEL(I,  26),I=1,7) / 1,-1,-1, 1, 0, 0, 0/
      DATA (NHEL(I,  27),I=1,7) / 1,-1,-1, 1, 0, 0, 1/
      DATA (NHEL(I,  28),I=1,7) / 1, 1, 1,-1, 0, 0,-1/
      DATA (NHEL(I,  29),I=1,7) / 1, 1, 1,-1, 0, 0, 0/
      DATA (NHEL(I,  30),I=1,7) / 1, 1, 1,-1, 0, 0, 1/
      DATA (NHEL(I,  31),I=1,7) / 1, 1, 1, 0, 0, 0,-1/
      DATA (NHEL(I,  32),I=1,7) / 1, 1, 1, 0, 0, 0, 0/
      DATA (NHEL(I,  33),I=1,7) / 1, 1, 1, 0, 0, 0, 1/
      DATA (NHEL(I,  34),I=1,7) / 1, 1, 1, 1, 0, 0,-1/
      DATA (NHEL(I,  35),I=1,7) / 1, 1, 1, 1, 0, 0, 0/
      DATA (NHEL(I,  36),I=1,7) / 1, 1, 1, 1, 0, 0, 1/
      DATA (NHEL(I,  37),I=1,7) / 1, 1, 0,-1, 0, 0,-1/
      DATA (NHEL(I,  38),I=1,7) / 1, 1, 0,-1, 0, 0, 0/
      DATA (NHEL(I,  39),I=1,7) / 1, 1, 0,-1, 0, 0, 1/
      DATA (NHEL(I,  40),I=1,7) / 1, 1, 0, 0, 0, 0,-1/
      DATA (NHEL(I,  41),I=1,7) / 1, 1, 0, 0, 0, 0, 0/
      DATA (NHEL(I,  42),I=1,7) / 1, 1, 0, 0, 0, 0, 1/
      DATA (NHEL(I,  43),I=1,7) / 1, 1, 0, 1, 0, 0,-1/
      DATA (NHEL(I,  44),I=1,7) / 1, 1, 0, 1, 0, 0, 0/
      DATA (NHEL(I,  45),I=1,7) / 1, 1, 0, 1, 0, 0, 1/
      DATA (NHEL(I,  46),I=1,7) / 1, 1,-1,-1, 0, 0,-1/
      DATA (NHEL(I,  47),I=1,7) / 1, 1,-1,-1, 0, 0, 0/
      DATA (NHEL(I,  48),I=1,7) / 1, 1,-1,-1, 0, 0, 1/
      DATA (NHEL(I,  49),I=1,7) / 1, 1,-1, 0, 0, 0,-1/
      DATA (NHEL(I,  50),I=1,7) / 1, 1,-1, 0, 0, 0, 0/
      DATA (NHEL(I,  51),I=1,7) / 1, 1,-1, 0, 0, 0, 1/
      DATA (NHEL(I,  52),I=1,7) / 1, 1,-1, 1, 0, 0,-1/
      DATA (NHEL(I,  53),I=1,7) / 1, 1,-1, 1, 0, 0, 0/
      DATA (NHEL(I,  54),I=1,7) / 1, 1,-1, 1, 0, 0, 1/
      DATA (NHEL(I,  55),I=1,7) /-1,-1, 1,-1, 0, 0,-1/
      DATA (NHEL(I,  56),I=1,7) /-1,-1, 1,-1, 0, 0, 0/
      DATA (NHEL(I,  57),I=1,7) /-1,-1, 1,-1, 0, 0, 1/
      DATA (NHEL(I,  58),I=1,7) /-1,-1, 1, 0, 0, 0,-1/
      DATA (NHEL(I,  59),I=1,7) /-1,-1, 1, 0, 0, 0, 0/
      DATA (NHEL(I,  60),I=1,7) /-1,-1, 1, 0, 0, 0, 1/
      DATA (NHEL(I,  61),I=1,7) /-1,-1, 1, 1, 0, 0,-1/
      DATA (NHEL(I,  62),I=1,7) /-1,-1, 1, 1, 0, 0, 0/
      DATA (NHEL(I,  63),I=1,7) /-1,-1, 1, 1, 0, 0, 1/
      DATA (NHEL(I,  64),I=1,7) /-1,-1, 0,-1, 0, 0,-1/
      DATA (NHEL(I,  65),I=1,7) /-1,-1, 0,-1, 0, 0, 0/
      DATA (NHEL(I,  66),I=1,7) /-1,-1, 0,-1, 0, 0, 1/
      DATA (NHEL(I,  67),I=1,7) /-1,-1, 0, 0, 0, 0,-1/
      DATA (NHEL(I,  68),I=1,7) /-1,-1, 0, 0, 0, 0, 0/
      DATA (NHEL(I,  69),I=1,7) /-1,-1, 0, 0, 0, 0, 1/
      DATA (NHEL(I,  70),I=1,7) /-1,-1, 0, 1, 0, 0,-1/
      DATA (NHEL(I,  71),I=1,7) /-1,-1, 0, 1, 0, 0, 0/
      DATA (NHEL(I,  72),I=1,7) /-1,-1, 0, 1, 0, 0, 1/
      DATA (NHEL(I,  73),I=1,7) /-1,-1,-1,-1, 0, 0,-1/
      DATA (NHEL(I,  74),I=1,7) /-1,-1,-1,-1, 0, 0, 0/
      DATA (NHEL(I,  75),I=1,7) /-1,-1,-1,-1, 0, 0, 1/
      DATA (NHEL(I,  76),I=1,7) /-1,-1,-1, 0, 0, 0,-1/
      DATA (NHEL(I,  77),I=1,7) /-1,-1,-1, 0, 0, 0, 0/
      DATA (NHEL(I,  78),I=1,7) /-1,-1,-1, 0, 0, 0, 1/
      DATA (NHEL(I,  79),I=1,7) /-1,-1,-1, 1, 0, 0,-1/
      DATA (NHEL(I,  80),I=1,7) /-1,-1,-1, 1, 0, 0, 0/
      DATA (NHEL(I,  81),I=1,7) /-1,-1,-1, 1, 0, 0, 1/
      DATA (NHEL(I,  82),I=1,7) /-1, 1, 1,-1, 0, 0,-1/
      DATA (NHEL(I,  83),I=1,7) /-1, 1, 1,-1, 0, 0, 0/
      DATA (NHEL(I,  84),I=1,7) /-1, 1, 1,-1, 0, 0, 1/
      DATA (NHEL(I,  85),I=1,7) /-1, 1, 1, 0, 0, 0,-1/
      DATA (NHEL(I,  86),I=1,7) /-1, 1, 1, 0, 0, 0, 0/
      DATA (NHEL(I,  87),I=1,7) /-1, 1, 1, 0, 0, 0, 1/
      DATA (NHEL(I,  88),I=1,7) /-1, 1, 1, 1, 0, 0,-1/
      DATA (NHEL(I,  89),I=1,7) /-1, 1, 1, 1, 0, 0, 0/
      DATA (NHEL(I,  90),I=1,7) /-1, 1, 1, 1, 0, 0, 1/
      DATA (NHEL(I,  91),I=1,7) /-1, 1, 0,-1, 0, 0,-1/
      DATA (NHEL(I,  92),I=1,7) /-1, 1, 0,-1, 0, 0, 0/
      DATA (NHEL(I,  93),I=1,7) /-1, 1, 0,-1, 0, 0, 1/
      DATA (NHEL(I,  94),I=1,7) /-1, 1, 0, 0, 0, 0,-1/
      DATA (NHEL(I,  95),I=1,7) /-1, 1, 0, 0, 0, 0, 0/
      DATA (NHEL(I,  96),I=1,7) /-1, 1, 0, 0, 0, 0, 1/
      DATA (NHEL(I,  97),I=1,7) /-1, 1, 0, 1, 0, 0,-1/
      DATA (NHEL(I,  98),I=1,7) /-1, 1, 0, 1, 0, 0, 0/
      DATA (NHEL(I,  99),I=1,7) /-1, 1, 0, 1, 0, 0, 1/
      DATA (NHEL(I, 100),I=1,7) /-1, 1,-1,-1, 0, 0,-1/
      DATA (NHEL(I, 101),I=1,7) /-1, 1,-1,-1, 0, 0, 0/
      DATA (NHEL(I, 102),I=1,7) /-1, 1,-1,-1, 0, 0, 1/
      DATA (NHEL(I, 103),I=1,7) /-1, 1,-1, 0, 0, 0,-1/
      DATA (NHEL(I, 104),I=1,7) /-1, 1,-1, 0, 0, 0, 0/
      DATA (NHEL(I, 105),I=1,7) /-1, 1,-1, 0, 0, 0, 1/
      DATA (NHEL(I, 106),I=1,7) /-1, 1,-1, 1, 0, 0,-1/
      DATA (NHEL(I, 107),I=1,7) /-1, 1,-1, 1, 0, 0, 0/
      DATA (NHEL(I, 108),I=1,7) /-1, 1,-1, 1, 0, 0, 1/
      DATA IDEN/ 8/

C     To be able to control when the matrix<i> subroutine can add
C      entries to the grid for the MC over helicity configuration
      LOGICAL ALLOW_HELICITY_GRID_ENTRIES
      COMMON/TO_ALLOW_HELICITY_GRID_ENTRIES/ALLOW_HELICITY_GRID_ENTRIES

C     ----------
C     BEGIN CODE
C     ----------
      NTRY(IMIRROR)=NTRY(IMIRROR)+1
      THIS_NTRY(IMIRROR) = THIS_NTRY(IMIRROR)+1
      DO I=1,NEXTERNAL
        JC(I) = +1
      ENDDO

      IF (MULTI_CHANNEL) THEN
        DO I=1,NDIAGS
          AMP2(I)=0D0
        ENDDO
        JAMP2(0)=1
        DO I=1,INT(JAMP2(0))
          JAMP2(I)=0D0
        ENDDO
      ENDIF
      ANS = 0D0
      WRITE(HEL_BUFF,'(20I5)') (0,I=1,NEXTERNAL)
      DO I=1,NCOMB
        TS(I)=0D0
      ENDDO

        !   If the helicity grid status is 0, this means that it is not yet initialized.
        !   If HEL_PICKED==-1, this means that calls to other matrix<i> where in initialization mode as well for the helicity.
      IF ((ISHEL(IMIRROR).EQ.0.AND.ISUM_HEL.EQ.0).OR.(DS_GET_DIM_STATUS
     $('Helicity').EQ.0).OR.(HEL_PICKED.EQ.-1)) THEN
        DO I=1,NCOMB
          IF (GOODHEL(I,IMIRROR) .OR. NTRY(IMIRROR).LE.MAXTRIES.OR.(ISU
     $M_HEL.NE.0).OR.THIS_NTRY(IMIRROR).LE.2) THEN
            T=MATRIX1(P ,NHEL(1,I),JC(1))
            DO JJ=1,NINCOMING
              IF(POL(JJ).NE.1D0.AND.NHEL(JJ,I).EQ.INT(SIGN(1D0,POL(JJ))
     $         )) THEN
                T=T*ABS(POL(JJ))
              ELSE IF(POL(JJ).NE.1D0)THEN
                T=T*(2D0-ABS(POL(JJ)))
              ENDIF
            ENDDO
            IF (ISUM_HEL.NE.0.AND.DS_GET_DIM_STATUS('Helicity')
     $       .EQ.0.AND.ALLOW_HELICITY_GRID_ENTRIES) THEN
              CALL DS_ADD_ENTRY('Helicity',I,T)
            ENDIF
            ANS=ANS+DABS(T)
            TS(I)=T
          ENDIF
        ENDDO
        IF(NTRY(IMIRROR).EQ.(MAXTRIES+1)) THEN
          CALL RESET_CUMULATIVE_VARIABLE()  ! avoid biais of the initialization
        ENDIF
        IF (ISUM_HEL.NE.0) THEN
            !         We set HEL_PICKED to -1 here so that later on, the call to DS_add_point in dsample.f does not add anything to the grid since it was already done here.
          HEL_PICKED = -1
            !         For safety, hardset the helicity sampling jacobian to 0.0d0 to make sure it is not .
          HEL_JACOBIAN   = 1.0D0
            !         We don't want to re-update the helicity grid if it was already updated by another matrix<i>, so we make sure that the reference grid is empty.
          REF_HELICITY_GRID = DS_GET_DIMENSION(REF_GRID,'Helicity')
          IF((DS_GET_DIM_STATUS('Helicity').EQ.1).AND.(REF_HELICITY_GRI
     $D%N_TOT_ENTRIES.EQ.0)) THEN
              !           If we finished the initialization we can update the grid so as to start sampling over it.
              !           However the grid will now be filled by dsample with different kind of weights (including pdf, flux, etc...) so by setting the grid_mode of the reference grid to 'initialization' we make sure it will be overwritten (as opposed to 'combined') by the running grid at the next update.
            CALL DS_UPDATE_GRID('Helicity')
            CALL DS_SET_GRID_MODE('Helicity','init')
          ENDIF
        ELSE
          JHEL(IMIRROR) = 1
          IF(NTRY(IMIRROR).LE.MAXTRIES.OR.THIS_NTRY(IMIRROR).LE.2)THEN
            DO I=1,NCOMB
              IF (.NOT.GOODHEL(I,IMIRROR) .AND. (DABS(TS(I)).GT.ANS
     $         *LIMHEL/NCOMB)) THEN
                GOODHEL(I,IMIRROR)=.TRUE.
                NGOOD(IMIRROR) = NGOOD(IMIRROR) +1
                IGOOD(NGOOD(IMIRROR),IMIRROR) = I
                PRINT *,'Added good helicity ',I,TS(I)*NCOMB/ANS,' in'
     $           //' event ',NTRY(IMIRROR), 'local:',THIS_NTRY(IMIRROR)
              ENDIF
            ENDDO
          ENDIF
          IF(NTRY(IMIRROR).EQ.MAXTRIES)THEN
            ISHEL(IMIRROR)=MIN(ISUM_HEL,NGOOD(IMIRROR))
          ENDIF
        ENDIF
      ELSE  ! random helicity 
C       The helicity configuration was chosen already by genps and put
C        in a common block defined in genps.inc.
        I = HEL_PICKED

        T=MATRIX1(P ,NHEL(1,I),JC(1))

        DO JJ=1,NINCOMING
          IF(POL(JJ).NE.1D0.AND.NHEL(JJ,I).EQ.INT(SIGN(1D0,POL(JJ))))
     $      THEN
            T=T*ABS(POL(JJ))
          ELSE IF(POL(JJ).NE.1D0)THEN
            T=T*(2D0-ABS(POL(JJ)))
          ENDIF
        ENDDO
C       Always one helicity at a time
        ANS = T
C       Include the Jacobian from helicity sampling
        ANS = ANS * HEL_JACOBIAN

        WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
      ENDIF
      IF (ANS.NE.0D0.AND.(ISUM_HEL .NE. 1.OR.HEL_PICKED.EQ.-1)) THEN
        CALL RANMAR(R)
        SUMHEL=0D0
        DO I=1,NCOMB
          SUMHEL=SUMHEL+DABS(TS(I))/ANS
          IF(R.LT.SUMHEL)THEN
            WRITE(HEL_BUFF,'(20i5)')(NHEL(II,I),II=1,NEXTERNAL)
C           Set right sign for ANS, based on sign of chosen helicity
            ANS=DSIGN(ANS,TS(I))
            GOTO 10
          ENDIF
        ENDDO
 10     CONTINUE
      ENDIF
      IF (MULTI_CHANNEL) THEN
        XTOT=0D0
        DO I=1,NDIAGS
          XTOT=XTOT+AMP2(I)
        ENDDO
        IF (XTOT.NE.0D0) THEN
          ANS=ANS*AMP2(SUBDIAG(1))/XTOT
        ELSE IF(ANS.NE.0D0) THEN
          WRITE(*,*) 'Problem in the multi-channeling. All amp2 are'
     $     //' zero but not the total matrix-element'
          STOP 1
        ENDIF
      ENDIF
      ANS=ANS/DBLE(IDEN)
      END


      REAL*8 FUNCTION MATRIX1(P,NHEL,IC)
C     
C     Generated by MadGraph5_aMC@NLO v. 2.6.1, 2017-12-12
C     By the MadGraph5_aMC@NLO Development Team
C     Visit launchpad.net/madgraph5 and amcatnlo.web.cern.ch
C     
C     Returns amplitude squared summed/avg over colors
C     for the point with external lines W(0:6,NEXTERNAL)
C     
C     Process: xd xd~ > w- w+ h h z DMS<=2 WEIGHTED<=10 @4
C     
      IMPLICIT NONE
C     
C     CONSTANTS
C     
      INTEGER    NGRAPHS
      PARAMETER (NGRAPHS=189)
      INCLUDE 'genps.inc'
      INCLUDE 'nexternal.inc'
      INCLUDE 'maxamps.inc'
      INTEGER    NWAVEFUNCS,     NCOLOR
      PARAMETER (NWAVEFUNCS=36, NCOLOR=1)
      REAL*8     ZERO
      PARAMETER (ZERO=0D0)
      COMPLEX*16 IMAG1
      PARAMETER (IMAG1=(0D0,1D0))
      INTEGER NAMPSO, NSQAMPSO
      PARAMETER (NAMPSO=1, NSQAMPSO=1)
      LOGICAL CHOSEN_SO_CONFIGS(NSQAMPSO)
      DATA CHOSEN_SO_CONFIGS/.TRUE./
      SAVE CHOSEN_SO_CONFIGS
C     
C     ARGUMENTS 
C     
      REAL*8 P(0:3,NEXTERNAL)
      INTEGER NHEL(NEXTERNAL), IC(NEXTERNAL)
C     
C     LOCAL VARIABLES 
C     
      INTEGER I,J,M,N
      COMPLEX*16 ZTEMP
      REAL*8 DENOM(NCOLOR), CF(NCOLOR,NCOLOR)
      COMPLEX*16 AMP(NGRAPHS), JAMP(NCOLOR,NAMPSO)
      COMPLEX*16 W(6,NWAVEFUNCS)
C     Needed for v4 models
      COMPLEX*16 DUM0,DUM1
      DATA DUM0, DUM1/(0D0, 0D0), (1D0, 0D0)/
C     
C     FUNCTION
C     
      INTEGER SQSOINDEX1
C     
C     GLOBAL VARIABLES
C     
      DOUBLE PRECISION AMP2(MAXAMPS), JAMP2(0:MAXFLOW)
      COMMON/TO_AMPS/  AMP2,       JAMP2
      INCLUDE 'coupl.inc'
C     
C     COLOR DATA
C     
      DATA DENOM(1)/1/
      DATA (CF(I,  1),I=  1,  1) /    1/
C     1 ColorOne()
C     ----------
C     BEGIN CODE
C     ----------
      CALL IXXXXX(P(0,1),MDL_MXD,NHEL(1),+1*IC(1),W(1,1))
      CALL OXXXXX(P(0,2),MDL_MXD,NHEL(2),-1*IC(2),W(1,2))
      CALL VXXXXX(P(0,3),MDL_MW,NHEL(3),+1*IC(3),W(1,3))
      CALL VXXXXX(P(0,4),MDL_MW,NHEL(4),+1*IC(4),W(1,4))
      CALL SXXXXX(P(0,5),+1*IC(5),W(1,5))
      CALL SXXXXX(P(0,6),+1*IC(6),W(1,6))
      CALL VXXXXX(P(0,7),MDL_MZ,NHEL(7),+1*IC(7),W(1,7))
      CALL FFS1_2_3(W(1,1),W(1,2),GC_13,GC_14,MDL_MY0,MDL_WY0,W(1,8))
      CALL VVV1_3(W(1,3),W(1,4),GC_50,MDL_MZ,MDL_WZ,W(1,2))
C     Amplitude(s) for diagram number 1
      CALL VVSSS1_0(W(1,2),W(1,7),W(1,5),W(1,6),W(1,8),GC_84,AMP(1))
      CALL SSS1_2_1(W(1,5),W(1,8),GC_31,GC_22,MDL_MH,MDL_WH,W(1,1))
      CALL VVS2_1(W(1,2),W(1,6),GC_109,MDL_MZ,MDL_WZ,W(1,9))
C     Amplitude(s) for diagram number 2
      CALL VVS2_0(W(1,9),W(1,7),W(1,1),GC_109,AMP(2))
      CALL VVS2_3(W(1,2),W(1,7),GC_109,MDL_MH,MDL_WH,W(1,10))
C     Amplitude(s) for diagram number 3
      CALL SSS1_0(W(1,1),W(1,10),W(1,6),GC_89,AMP(3))
C     Amplitude(s) for diagram number 4
      CALL VVSS1_0(W(1,2),W(1,7),W(1,6),W(1,1),GC_79,AMP(4))
      CALL SSS1_2_1(W(1,6),W(1,8),GC_31,GC_22,MDL_MH,MDL_WH,W(1,11))
      CALL VVS2_1(W(1,2),W(1,5),GC_109,MDL_MZ,MDL_WZ,W(1,12))
C     Amplitude(s) for diagram number 5
      CALL VVS2_0(W(1,12),W(1,7),W(1,11),GC_109,AMP(5))
C     Amplitude(s) for diagram number 6
      CALL SSS1_0(W(1,11),W(1,10),W(1,5),GC_89,AMP(6))
C     Amplitude(s) for diagram number 7
      CALL VVSS1_0(W(1,2),W(1,7),W(1,5),W(1,11),GC_79,AMP(7))
      CALL VVS1_2_3_1(W(1,7),W(1,8),GC_80,GC_111,GC_82,MDL_MZ,MDL_WZ
     $ ,W(1,10))
C     Amplitude(s) for diagram number 8
      CALL VVS2_0(W(1,10),W(1,12),W(1,6),GC_109,AMP(8))
C     Amplitude(s) for diagram number 9
      CALL VVS2_0(W(1,10),W(1,9),W(1,5),GC_109,AMP(9))
C     Amplitude(s) for diagram number 10
      CALL VVSS1_0(W(1,2),W(1,10),W(1,5),W(1,6),GC_79,AMP(10))
      CALL VVSS1_1(W(1,7),W(1,5),W(1,8),GC_110,MDL_MZ,MDL_WZ,W(1,9))
C     Amplitude(s) for diagram number 11
      CALL VVS2_0(W(1,2),W(1,9),W(1,6),GC_109,AMP(11))
      CALL VVSS1_1(W(1,7),W(1,6),W(1,8),GC_110,MDL_MZ,MDL_WZ,W(1,12))
C     Amplitude(s) for diagram number 12
      CALL VVS2_0(W(1,2),W(1,12),W(1,5),GC_109,AMP(12))
      CALL VVV1P0_1(W(1,3),W(1,4),GC_4,ZERO,ZERO,W(1,13))
      CALL SSS1_1(W(1,5),W(1,6),GC_89,MDL_MH,MDL_WH,W(1,14))
      CALL VVS1_3_2(W(1,13),W(1,8),GC_73,GC_77,MDL_MZ,MDL_WZ,W(1,15))
C     Amplitude(s) for diagram number 13
      CALL VVS2_0(W(1,7),W(1,15),W(1,14),GC_109,AMP(13))
C     Amplitude(s) for diagram number 14
      CALL VVSS1_0(W(1,2),W(1,7),W(1,14),W(1,8),GC_110,AMP(14))
      CALL VVS1_2_3_1(W(1,2),W(1,8),GC_80,GC_111,GC_82,MDL_MZ,MDL_WZ
     $ ,W(1,16))
C     Amplitude(s) for diagram number 15
      CALL VVS2_0(W(1,7),W(1,16),W(1,14),GC_109,AMP(15))
      CALL SSS1_2_1(W(1,14),W(1,8),GC_31,GC_22,MDL_MH,MDL_WH,W(1,17))
C     Amplitude(s) for diagram number 16
      CALL VVS2_0(W(1,2),W(1,7),W(1,17),GC_109,AMP(16))
C     Amplitude(s) for diagram number 17
      CALL VVS2_0(W(1,2),W(1,10),W(1,14),GC_109,AMP(17))
      CALL VVS2_1(W(1,7),W(1,5),GC_109,MDL_MZ,MDL_WZ,W(1,18))
C     Amplitude(s) for diagram number 18
      CALL VVS2_0(W(1,18),W(1,15),W(1,6),GC_109,AMP(18))
C     Amplitude(s) for diagram number 19
      CALL VVSS1_0(W(1,2),W(1,18),W(1,6),W(1,8),GC_110,AMP(19))
C     Amplitude(s) for diagram number 20
      CALL VVS2_0(W(1,18),W(1,16),W(1,6),GC_109,AMP(20))
      CALL VVS1_2_3_1(W(1,18),W(1,8),GC_80,GC_111,GC_82,MDL_MZ,MDL_WZ
     $ ,W(1,19))
C     Amplitude(s) for diagram number 21
      CALL VVS2_0(W(1,2),W(1,19),W(1,6),GC_109,AMP(21))
C     Amplitude(s) for diagram number 22
      CALL VVS2_0(W(1,2),W(1,18),W(1,11),GC_109,AMP(22))
      CALL VVS2_1(W(1,7),W(1,6),GC_109,MDL_MZ,MDL_WZ,W(1,20))
C     Amplitude(s) for diagram number 23
      CALL VVS2_0(W(1,20),W(1,15),W(1,5),GC_109,AMP(23))
C     Amplitude(s) for diagram number 24
      CALL VVSS1_0(W(1,2),W(1,20),W(1,5),W(1,8),GC_110,AMP(24))
C     Amplitude(s) for diagram number 25
      CALL VVS2_0(W(1,20),W(1,16),W(1,5),GC_109,AMP(25))
C     Amplitude(s) for diagram number 26
      CALL VVS2_0(W(1,2),W(1,20),W(1,1),GC_109,AMP(26))
      CALL VVS1_2_3_1(W(1,20),W(1,8),GC_80,GC_111,GC_82,MDL_MZ,MDL_WZ
     $ ,W(1,16))
C     Amplitude(s) for diagram number 27
      CALL VVS2_0(W(1,2),W(1,16),W(1,5),GC_109,AMP(27))
      CALL VVSS1_1(W(1,7),W(1,5),W(1,6),GC_79,MDL_MZ,MDL_WZ,W(1,15))
C     Amplitude(s) for diagram number 28
      CALL VVS1_3_0(W(1,13),W(1,15),W(1,8),GC_73,GC_77,AMP(28))
C     Amplitude(s) for diagram number 29
      CALL VVS1_2_3_0(W(1,2),W(1,15),W(1,8),GC_80,GC_111,GC_82,AMP(29))
      CALL VVS2_2(W(1,3),W(1,5),GC_94,MDL_MW,MDL_WW,W(1,2))
      CALL VVS1_2_3_1(W(1,4),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,13))
      CALL VVS2_2(W(1,2),W(1,6),GC_94,MDL_MW,MDL_WW,W(1,21))
C     Amplitude(s) for diagram number 30
      CALL VVV1_0(W(1,21),W(1,13),W(1,7),GC_50,AMP(30))
      CALL VVV1_2(W(1,2),W(1,7),GC_50,MDL_MW,MDL_WW,W(1,22))
C     Amplitude(s) for diagram number 31
      CALL VVS2_0(W(1,22),W(1,13),W(1,6),GC_94,AMP(31))
      CALL VVV1_3(W(1,2),W(1,4),GC_50,MDL_MZ,MDL_WZ,W(1,23))
C     Amplitude(s) for diagram number 32
      CALL VVS2_0(W(1,23),W(1,7),W(1,11),GC_109,AMP(32))
C     Amplitude(s) for diagram number 33
      CALL VVS2_0(W(1,22),W(1,4),W(1,11),GC_94,AMP(33))
C     Amplitude(s) for diagram number 34
      CALL VVS2_0(W(1,10),W(1,23),W(1,6),GC_109,AMP(34))
      CALL VVS1_3P0_1(W(1,7),W(1,8),GC_73,GC_77,ZERO,ZERO,W(1,23))
C     Amplitude(s) for diagram number 35
      CALL VVV1_0(W(1,23),W(1,21),W(1,4),GC_4,AMP(35))
C     Amplitude(s) for diagram number 36
      CALL VVV1_0(W(1,21),W(1,4),W(1,10),GC_50,AMP(36))
      CALL VVSS1_1(W(1,4),W(1,6),W(1,8),GC_96,MDL_MW,MDL_WW,W(1,21))
C     Amplitude(s) for diagram number 37
      CALL VVV1_0(W(1,2),W(1,21),W(1,7),GC_50,AMP(37))
      CALL VVVS1_2_1(W(1,4),W(1,7),W(1,8),GC_55,GC_62,MDL_MW,MDL_WW
     $ ,W(1,22))
C     Amplitude(s) for diagram number 38
      CALL VVS2_0(W(1,2),W(1,22),W(1,6),GC_94,AMP(38))
C     Amplitude(s) for diagram number 39
      CALL VVV1_0(W(1,2),W(1,4),W(1,12),GC_50,AMP(39))
      CALL VVS2_1(W(1,4),W(1,6),GC_94,MDL_MW,MDL_WW,W(1,24))
C     Amplitude(s) for diagram number 40
      CALL VVVS1_2_0(W(1,2),W(1,24),W(1,7),W(1,8),GC_55,GC_62,AMP(40))
      CALL VVS1_2_3_2(W(1,2),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,25))
C     Amplitude(s) for diagram number 41
      CALL VVV1_0(W(1,25),W(1,24),W(1,7),GC_50,AMP(41))
      CALL VVS1_2_3_1(W(1,24),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,26))
C     Amplitude(s) for diagram number 42
      CALL VVV1_0(W(1,2),W(1,26),W(1,7),GC_50,AMP(42))
C     Amplitude(s) for diagram number 43
      CALL VVV1_0(W(1,23),W(1,2),W(1,24),GC_4,AMP(43))
C     Amplitude(s) for diagram number 44
      CALL VVV1_0(W(1,2),W(1,24),W(1,10),GC_50,AMP(44))
      CALL VVV1_1(W(1,4),W(1,7),GC_50,MDL_MW,MDL_WW,W(1,27))
C     Amplitude(s) for diagram number 45
      CALL VVSS1_0(W(1,2),W(1,27),W(1,6),W(1,8),GC_96,AMP(45))
C     Amplitude(s) for diagram number 46
      CALL VVS2_0(W(1,25),W(1,27),W(1,6),GC_94,AMP(46))
      CALL VVS1_2_3_1(W(1,27),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,28))
C     Amplitude(s) for diagram number 47
      CALL VVS2_0(W(1,2),W(1,28),W(1,6),GC_94,AMP(47))
C     Amplitude(s) for diagram number 48
      CALL VVS2_0(W(1,2),W(1,27),W(1,11),GC_94,AMP(48))
C     Amplitude(s) for diagram number 49
      CALL VVVS1_2_0(W(1,2),W(1,4),W(1,20),W(1,8),GC_55,GC_62,AMP(49))
C     Amplitude(s) for diagram number 50
      CALL VVV1_0(W(1,25),W(1,4),W(1,20),GC_50,AMP(50))
C     Amplitude(s) for diagram number 51
      CALL VVV1_0(W(1,2),W(1,13),W(1,20),GC_50,AMP(51))
      CALL VVS1_3P0_1(W(1,20),W(1,8),GC_73,GC_77,ZERO,ZERO,W(1,25))
C     Amplitude(s) for diagram number 52
      CALL VVV1_0(W(1,25),W(1,2),W(1,4),GC_4,AMP(52))
C     Amplitude(s) for diagram number 53
      CALL VVV1_0(W(1,2),W(1,4),W(1,16),GC_50,AMP(53))
      CALL VVS2_2(W(1,3),W(1,6),GC_94,MDL_MW,MDL_WW,W(1,2))
      CALL VVS2_2(W(1,2),W(1,5),GC_94,MDL_MW,MDL_WW,W(1,29))
C     Amplitude(s) for diagram number 54
      CALL VVV1_0(W(1,29),W(1,13),W(1,7),GC_50,AMP(54))
      CALL VVV1_2(W(1,2),W(1,7),GC_50,MDL_MW,MDL_WW,W(1,30))
C     Amplitude(s) for diagram number 55
      CALL VVS2_0(W(1,30),W(1,13),W(1,5),GC_94,AMP(55))
      CALL VVV1_3(W(1,2),W(1,4),GC_50,MDL_MZ,MDL_WZ,W(1,31))
C     Amplitude(s) for diagram number 56
      CALL VVS2_0(W(1,31),W(1,7),W(1,1),GC_109,AMP(56))
C     Amplitude(s) for diagram number 57
      CALL VVS2_0(W(1,30),W(1,4),W(1,1),GC_94,AMP(57))
C     Amplitude(s) for diagram number 58
      CALL VVS2_0(W(1,10),W(1,31),W(1,5),GC_109,AMP(58))
C     Amplitude(s) for diagram number 59
      CALL VVV1_0(W(1,23),W(1,29),W(1,4),GC_4,AMP(59))
C     Amplitude(s) for diagram number 60
      CALL VVV1_0(W(1,29),W(1,4),W(1,10),GC_50,AMP(60))
      CALL VVSS1_1(W(1,4),W(1,5),W(1,8),GC_96,MDL_MW,MDL_WW,W(1,29))
C     Amplitude(s) for diagram number 61
      CALL VVV1_0(W(1,2),W(1,29),W(1,7),GC_50,AMP(61))
C     Amplitude(s) for diagram number 62
      CALL VVS2_0(W(1,2),W(1,22),W(1,5),GC_94,AMP(62))
C     Amplitude(s) for diagram number 63
      CALL VVV1_0(W(1,2),W(1,4),W(1,9),GC_50,AMP(63))
      CALL VVS2_1(W(1,4),W(1,5),GC_94,MDL_MW,MDL_WW,W(1,31))
C     Amplitude(s) for diagram number 64
      CALL VVVS1_2_0(W(1,2),W(1,31),W(1,7),W(1,8),GC_55,GC_62,AMP(64))
      CALL VVS1_2_3_2(W(1,2),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,30))
C     Amplitude(s) for diagram number 65
      CALL VVV1_0(W(1,30),W(1,31),W(1,7),GC_50,AMP(65))
      CALL VVS1_2_3_1(W(1,31),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,32))
C     Amplitude(s) for diagram number 66
      CALL VVV1_0(W(1,2),W(1,32),W(1,7),GC_50,AMP(66))
C     Amplitude(s) for diagram number 67
      CALL VVV1_0(W(1,23),W(1,2),W(1,31),GC_4,AMP(67))
C     Amplitude(s) for diagram number 68
      CALL VVV1_0(W(1,2),W(1,31),W(1,10),GC_50,AMP(68))
C     Amplitude(s) for diagram number 69
      CALL VVSS1_0(W(1,2),W(1,27),W(1,5),W(1,8),GC_96,AMP(69))
C     Amplitude(s) for diagram number 70
      CALL VVS2_0(W(1,30),W(1,27),W(1,5),GC_94,AMP(70))
C     Amplitude(s) for diagram number 71
      CALL VVS2_0(W(1,2),W(1,28),W(1,5),GC_94,AMP(71))
C     Amplitude(s) for diagram number 72
      CALL VVS2_0(W(1,2),W(1,27),W(1,1),GC_94,AMP(72))
C     Amplitude(s) for diagram number 73
      CALL VVVS1_2_0(W(1,2),W(1,4),W(1,18),W(1,8),GC_55,GC_62,AMP(73))
C     Amplitude(s) for diagram number 74
      CALL VVV1_0(W(1,30),W(1,4),W(1,18),GC_50,AMP(74))
C     Amplitude(s) for diagram number 75
      CALL VVV1_0(W(1,2),W(1,13),W(1,18),GC_50,AMP(75))
      CALL VVS1_3P0_1(W(1,18),W(1,8),GC_73,GC_77,ZERO,ZERO,W(1,30))
C     Amplitude(s) for diagram number 76
      CALL VVV1_0(W(1,30),W(1,2),W(1,4),GC_4,AMP(76))
C     Amplitude(s) for diagram number 77
      CALL VVV1_0(W(1,2),W(1,4),W(1,19),GC_50,AMP(77))
      CALL VVV1_2(W(1,3),W(1,7),GC_50,MDL_MW,MDL_WW,W(1,2))
C     Amplitude(s) for diagram number 78
      CALL VVSSS1_0(W(1,2),W(1,4),W(1,5),W(1,6),W(1,8),GC_37,AMP(78))
      CALL VVS2_2(W(1,2),W(1,5),GC_94,MDL_MW,MDL_WW,W(1,33))
C     Amplitude(s) for diagram number 79
      CALL VVS2_0(W(1,33),W(1,13),W(1,6),GC_94,AMP(79))
      CALL VVS2_2(W(1,2),W(1,6),GC_94,MDL_MW,MDL_WW,W(1,34))
C     Amplitude(s) for diagram number 80
      CALL VVS2_0(W(1,34),W(1,13),W(1,5),GC_94,AMP(80))
C     Amplitude(s) for diagram number 81
      CALL VVSS1_0(W(1,2),W(1,13),W(1,5),W(1,6),GC_34,AMP(81))
      CALL VVS2_3(W(1,2),W(1,4),GC_94,MDL_MH,MDL_WH,W(1,35))
C     Amplitude(s) for diagram number 82
      CALL SSS1_0(W(1,1),W(1,35),W(1,6),GC_89,AMP(82))
C     Amplitude(s) for diagram number 83
      CALL VVS2_0(W(1,34),W(1,4),W(1,1),GC_94,AMP(83))
C     Amplitude(s) for diagram number 84
      CALL VVSS1_0(W(1,2),W(1,4),W(1,6),W(1,1),GC_34,AMP(84))
C     Amplitude(s) for diagram number 85
      CALL SSS1_0(W(1,11),W(1,35),W(1,5),GC_89,AMP(85))
C     Amplitude(s) for diagram number 86
      CALL VVS2_0(W(1,33),W(1,4),W(1,11),GC_94,AMP(86))
C     Amplitude(s) for diagram number 87
      CALL VVSS1_0(W(1,2),W(1,4),W(1,5),W(1,11),GC_34,AMP(87))
C     Amplitude(s) for diagram number 88
      CALL VVS2_0(W(1,2),W(1,29),W(1,6),GC_94,AMP(88))
C     Amplitude(s) for diagram number 89
      CALL VVS2_0(W(1,2),W(1,21),W(1,5),GC_94,AMP(89))
C     Amplitude(s) for diagram number 90
      CALL VVSS1_0(W(1,2),W(1,31),W(1,6),W(1,8),GC_96,AMP(90))
      CALL VVS1_2_3_2(W(1,2),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,33))
C     Amplitude(s) for diagram number 91
      CALL VVS2_0(W(1,33),W(1,31),W(1,6),GC_94,AMP(91))
C     Amplitude(s) for diagram number 92
      CALL VVS2_0(W(1,2),W(1,32),W(1,6),GC_94,AMP(92))
C     Amplitude(s) for diagram number 93
      CALL VVS2_0(W(1,2),W(1,31),W(1,11),GC_94,AMP(93))
C     Amplitude(s) for diagram number 94
      CALL VVSS1_0(W(1,2),W(1,24),W(1,5),W(1,8),GC_96,AMP(94))
C     Amplitude(s) for diagram number 95
      CALL VVS2_0(W(1,33),W(1,24),W(1,5),GC_94,AMP(95))
C     Amplitude(s) for diagram number 96
      CALL VVS2_0(W(1,2),W(1,26),W(1,5),GC_94,AMP(96))
C     Amplitude(s) for diagram number 97
      CALL VVS2_0(W(1,2),W(1,24),W(1,1),GC_94,AMP(97))
C     Amplitude(s) for diagram number 98
      CALL VVSS1_0(W(1,2),W(1,4),W(1,14),W(1,8),GC_96,AMP(98))
C     Amplitude(s) for diagram number 99
      CALL VVS2_0(W(1,33),W(1,4),W(1,14),GC_94,AMP(99))
C     Amplitude(s) for diagram number 100
      CALL VVS2_0(W(1,2),W(1,13),W(1,14),GC_94,AMP(100))
C     Amplitude(s) for diagram number 101
      CALL VVS2_0(W(1,2),W(1,4),W(1,17),GC_94,AMP(101))
      CALL VVSS1_1(W(1,4),W(1,5),W(1,6),GC_34,MDL_MW,MDL_WW,W(1,33))
C     Amplitude(s) for diagram number 102
      CALL VVS1_2_3_0(W(1,2),W(1,33),W(1,8),GC_20,GC_102,GC_28,AMP(102)
     $ )
      CALL VVS1_2_3_2(W(1,3),W(1,8),GC_20,GC_102,GC_28,MDL_MW,MDL_WW
     $ ,W(1,2))
      CALL VVS2_1(W(1,31),W(1,6),GC_94,MDL_MW,MDL_WW,W(1,35))
C     Amplitude(s) for diagram number 103
      CALL VVV1_0(W(1,2),W(1,35),W(1,7),GC_50,AMP(103))
      CALL VVV1_1(W(1,31),W(1,7),GC_50,MDL_MW,MDL_WW,W(1,34))
C     Amplitude(s) for diagram number 104
      CALL VVS2_0(W(1,2),W(1,34),W(1,6),GC_94,AMP(104))
      CALL VVV1_3(W(1,3),W(1,31),GC_50,MDL_MZ,MDL_WZ,W(1,36))
C     Amplitude(s) for diagram number 105
      CALL VVS2_0(W(1,36),W(1,7),W(1,11),GC_109,AMP(105))
C     Amplitude(s) for diagram number 106
      CALL VVS2_0(W(1,3),W(1,34),W(1,11),GC_94,AMP(106))
C     Amplitude(s) for diagram number 107
      CALL VVS2_0(W(1,10),W(1,36),W(1,6),GC_109,AMP(107))
C     Amplitude(s) for diagram number 108
      CALL VVV1_0(W(1,23),W(1,3),W(1,35),GC_4,AMP(108))
C     Amplitude(s) for diagram number 109
      CALL VVV1_0(W(1,3),W(1,35),W(1,10),GC_50,AMP(109))
      CALL VVSS1_2(W(1,3),W(1,6),W(1,8),GC_96,MDL_MW,MDL_WW,W(1,35))
C     Amplitude(s) for diagram number 110
      CALL VVV1_0(W(1,35),W(1,31),W(1,7),GC_50,AMP(110))
      CALL VVVS1_2_2(W(1,3),W(1,7),W(1,8),GC_55,GC_62,MDL_MW,MDL_WW
     $ ,W(1,36))
C     Amplitude(s) for diagram number 111
      CALL VVS2_0(W(1,36),W(1,31),W(1,6),GC_94,AMP(111))
C     Amplitude(s) for diagram number 112
      CALL VVV1_0(W(1,3),W(1,31),W(1,12),GC_50,AMP(112))
C     Amplitude(s) for diagram number 113
      CALL VVVS1_2_0(W(1,3),W(1,31),W(1,20),W(1,8),GC_55,GC_62,AMP(113)
     $ )
C     Amplitude(s) for diagram number 114
      CALL VVV1_0(W(1,2),W(1,31),W(1,20),GC_50,AMP(114))
C     Amplitude(s) for diagram number 115
      CALL VVV1_0(W(1,3),W(1,32),W(1,20),GC_50,AMP(115))
C     Amplitude(s) for diagram number 116
      CALL VVV1_0(W(1,25),W(1,3),W(1,31),GC_4,AMP(116))
C     Amplitude(s) for diagram number 117
      CALL VVV1_0(W(1,3),W(1,31),W(1,16),GC_50,AMP(117))
      CALL VVS2_1(W(1,24),W(1,5),GC_94,MDL_MW,MDL_WW,W(1,31))
C     Amplitude(s) for diagram number 118
      CALL VVV1_0(W(1,2),W(1,31),W(1,7),GC_50,AMP(118))
      CALL VVV1_1(W(1,24),W(1,7),GC_50,MDL_MW,MDL_WW,W(1,16))
C     Amplitude(s) for diagram number 119
      CALL VVS2_0(W(1,2),W(1,16),W(1,5),GC_94,AMP(119))
      CALL VVV1_3(W(1,3),W(1,24),GC_50,MDL_MZ,MDL_WZ,W(1,25))
C     Amplitude(s) for diagram number 120
      CALL VVS2_0(W(1,25),W(1,7),W(1,1),GC_109,AMP(120))
C     Amplitude(s) for diagram number 121
      CALL VVS2_0(W(1,3),W(1,16),W(1,1),GC_94,AMP(121))
C     Amplitude(s) for diagram number 122
      CALL VVS2_0(W(1,10),W(1,25),W(1,5),GC_109,AMP(122))
C     Amplitude(s) for diagram number 123
      CALL VVV1_0(W(1,23),W(1,3),W(1,31),GC_4,AMP(123))
C     Amplitude(s) for diagram number 124
      CALL VVV1_0(W(1,3),W(1,31),W(1,10),GC_50,AMP(124))
      CALL VVSS1_2(W(1,3),W(1,5),W(1,8),GC_96,MDL_MW,MDL_WW,W(1,31))
C     Amplitude(s) for diagram number 125
      CALL VVV1_0(W(1,31),W(1,24),W(1,7),GC_50,AMP(125))
C     Amplitude(s) for diagram number 126
      CALL VVS2_0(W(1,36),W(1,24),W(1,5),GC_94,AMP(126))
C     Amplitude(s) for diagram number 127
      CALL VVV1_0(W(1,3),W(1,24),W(1,9),GC_50,AMP(127))
C     Amplitude(s) for diagram number 128
      CALL VVVS1_2_0(W(1,3),W(1,24),W(1,18),W(1,8),GC_55,GC_62,AMP(128)
     $ )
C     Amplitude(s) for diagram number 129
      CALL VVV1_0(W(1,2),W(1,24),W(1,18),GC_50,AMP(129))
C     Amplitude(s) for diagram number 130
      CALL VVV1_0(W(1,3),W(1,26),W(1,18),GC_50,AMP(130))
C     Amplitude(s) for diagram number 131
      CALL VVV1_0(W(1,30),W(1,3),W(1,24),GC_4,AMP(131))
C     Amplitude(s) for diagram number 132
      CALL VVV1_0(W(1,3),W(1,24),W(1,19),GC_50,AMP(132))
C     Amplitude(s) for diagram number 133
      CALL VVSSS1_0(W(1,3),W(1,27),W(1,5),W(1,6),W(1,8),GC_37,AMP(133))
      CALL VVS2_1(W(1,27),W(1,5),GC_94,MDL_MW,MDL_WW,W(1,24))
C     Amplitude(s) for diagram number 134
      CALL VVS2_0(W(1,2),W(1,24),W(1,6),GC_94,AMP(134))
      CALL VVS2_1(W(1,27),W(1,6),GC_94,MDL_MW,MDL_WW,W(1,19))
C     Amplitude(s) for diagram number 135
      CALL VVS2_0(W(1,2),W(1,19),W(1,5),GC_94,AMP(135))
C     Amplitude(s) for diagram number 136
      CALL VVSS1_0(W(1,2),W(1,27),W(1,5),W(1,6),GC_34,AMP(136))
      CALL VVS2_3(W(1,3),W(1,27),GC_94,MDL_MH,MDL_WH,W(1,30))
C     Amplitude(s) for diagram number 137
      CALL SSS1_0(W(1,1),W(1,30),W(1,6),GC_89,AMP(137))
C     Amplitude(s) for diagram number 138
      CALL VVS2_0(W(1,3),W(1,19),W(1,1),GC_94,AMP(138))
C     Amplitude(s) for diagram number 139
      CALL VVSS1_0(W(1,3),W(1,27),W(1,6),W(1,1),GC_34,AMP(139))
C     Amplitude(s) for diagram number 140
      CALL SSS1_0(W(1,11),W(1,30),W(1,5),GC_89,AMP(140))
C     Amplitude(s) for diagram number 141
      CALL VVS2_0(W(1,3),W(1,24),W(1,11),GC_94,AMP(141))
C     Amplitude(s) for diagram number 142
      CALL VVSS1_0(W(1,3),W(1,27),W(1,5),W(1,11),GC_34,AMP(142))
C     Amplitude(s) for diagram number 143
      CALL VVS2_0(W(1,31),W(1,27),W(1,6),GC_94,AMP(143))
C     Amplitude(s) for diagram number 144
      CALL VVS2_0(W(1,35),W(1,27),W(1,5),GC_94,AMP(144))
C     Amplitude(s) for diagram number 145
      CALL VVSS1_0(W(1,3),W(1,27),W(1,14),W(1,8),GC_96,AMP(145))
C     Amplitude(s) for diagram number 146
      CALL VVS2_0(W(1,2),W(1,27),W(1,14),GC_94,AMP(146))
C     Amplitude(s) for diagram number 147
      CALL VVS2_0(W(1,3),W(1,28),W(1,14),GC_94,AMP(147))
C     Amplitude(s) for diagram number 148
      CALL VVS2_0(W(1,3),W(1,27),W(1,17),GC_94,AMP(148))
      CALL VVS2_1(W(1,4),W(1,14),GC_94,MDL_MW,MDL_WW,W(1,17))
C     Amplitude(s) for diagram number 149
      CALL VVV1_0(W(1,2),W(1,17),W(1,7),GC_50,AMP(149))
      CALL VVS2_1(W(1,7),W(1,14),GC_109,MDL_MZ,MDL_WZ,W(1,28))
C     Amplitude(s) for diagram number 150
      CALL VVV1_0(W(1,2),W(1,4),W(1,28),GC_50,AMP(150))
      CALL VVS2_2(W(1,3),W(1,14),GC_94,MDL_MW,MDL_WW,W(1,24))
C     Amplitude(s) for diagram number 151
      CALL VVV1_0(W(1,24),W(1,13),W(1,7),GC_50,AMP(151))
C     Amplitude(s) for diagram number 152
      CALL VVV1_0(W(1,3),W(1,13),W(1,28),GC_50,AMP(152))
C     Amplitude(s) for diagram number 153
      CALL VVV1_0(W(1,23),W(1,24),W(1,4),GC_4,AMP(153))
C     Amplitude(s) for diagram number 154
      CALL VVV1_0(W(1,24),W(1,4),W(1,10),GC_50,AMP(154))
C     Amplitude(s) for diagram number 155
      CALL VVV1_0(W(1,23),W(1,3),W(1,17),GC_4,AMP(155))
C     Amplitude(s) for diagram number 156
      CALL VVV1_0(W(1,3),W(1,17),W(1,10),GC_50,AMP(156))
      CALL VVVS1_2_3(W(1,3),W(1,4),W(1,8),GC_55,GC_62,MDL_MZ,MDL_WZ
     $ ,W(1,17))
C     Amplitude(s) for diagram number 157
      CALL VVS2_0(W(1,7),W(1,17),W(1,14),GC_109,AMP(157))
C     Amplitude(s) for diagram number 158
      CALL VVS2_0(W(1,36),W(1,4),W(1,14),GC_94,AMP(158))
C     Amplitude(s) for diagram number 159
      CALL VVS2_0(W(1,3),W(1,22),W(1,14),GC_94,AMP(159))
      CALL VVV1_1(W(1,4),W(1,18),GC_50,MDL_MW,MDL_WW,W(1,22))
C     Amplitude(s) for diagram number 160
      CALL VVS2_0(W(1,2),W(1,22),W(1,6),GC_94,AMP(160))
      CALL VVS2_1(W(1,18),W(1,6),GC_109,MDL_MZ,MDL_WZ,W(1,14))
C     Amplitude(s) for diagram number 161
      CALL VVV1_0(W(1,2),W(1,4),W(1,14),GC_50,AMP(161))
      CALL VVV1_2(W(1,3),W(1,18),GC_50,MDL_MW,MDL_WW,W(1,36))
C     Amplitude(s) for diagram number 162
      CALL VVS2_0(W(1,36),W(1,13),W(1,6),GC_94,AMP(162))
C     Amplitude(s) for diagram number 163
      CALL VVV1_0(W(1,3),W(1,13),W(1,14),GC_50,AMP(163))
C     Amplitude(s) for diagram number 164
      CALL VVS2_0(W(1,36),W(1,4),W(1,11),GC_94,AMP(164))
C     Amplitude(s) for diagram number 165
      CALL VVS2_0(W(1,3),W(1,22),W(1,11),GC_94,AMP(165))
C     Amplitude(s) for diagram number 166
      CALL VVS2_0(W(1,18),W(1,17),W(1,6),GC_109,AMP(166))
C     Amplitude(s) for diagram number 167
      CALL VVV1_0(W(1,35),W(1,4),W(1,18),GC_50,AMP(167))
C     Amplitude(s) for diagram number 168
      CALL VVV1_0(W(1,3),W(1,21),W(1,18),GC_50,AMP(168))
      CALL VVV1_1(W(1,4),W(1,20),GC_50,MDL_MW,MDL_WW,W(1,21))
C     Amplitude(s) for diagram number 169
      CALL VVS2_0(W(1,2),W(1,21),W(1,5),GC_94,AMP(169))
      CALL VVS2_1(W(1,20),W(1,5),GC_109,MDL_MZ,MDL_WZ,W(1,18))
C     Amplitude(s) for diagram number 170
      CALL VVV1_0(W(1,2),W(1,4),W(1,18),GC_50,AMP(170))
      CALL VVV1_2(W(1,3),W(1,20),GC_50,MDL_MW,MDL_WW,W(1,35))
C     Amplitude(s) for diagram number 171
      CALL VVS2_0(W(1,35),W(1,13),W(1,5),GC_94,AMP(171))
C     Amplitude(s) for diagram number 172
      CALL VVV1_0(W(1,3),W(1,13),W(1,18),GC_50,AMP(172))
C     Amplitude(s) for diagram number 173
      CALL VVS2_0(W(1,35),W(1,4),W(1,1),GC_94,AMP(173))
C     Amplitude(s) for diagram number 174
      CALL VVS2_0(W(1,3),W(1,21),W(1,1),GC_94,AMP(174))
C     Amplitude(s) for diagram number 175
      CALL VVS2_0(W(1,20),W(1,17),W(1,5),GC_109,AMP(175))
C     Amplitude(s) for diagram number 176
      CALL VVV1_0(W(1,31),W(1,4),W(1,20),GC_50,AMP(176))
C     Amplitude(s) for diagram number 177
      CALL VVV1_0(W(1,3),W(1,29),W(1,20),GC_50,AMP(177))
      CALL VVSS1_2(W(1,3),W(1,5),W(1,6),GC_34,MDL_MW,MDL_WW,W(1,29))
C     Amplitude(s) for diagram number 178
      CALL VVVS1_2_0(W(1,29),W(1,4),W(1,7),W(1,8),GC_55,GC_62,AMP(178))
C     Amplitude(s) for diagram number 179
      CALL VVV1_0(W(1,29),W(1,13),W(1,7),GC_50,AMP(179))
C     Amplitude(s) for diagram number 180
      CALL VVV1_0(W(1,23),W(1,29),W(1,4),GC_4,AMP(180))
C     Amplitude(s) for diagram number 181
      CALL VVV1_0(W(1,29),W(1,4),W(1,10),GC_50,AMP(181))
C     Amplitude(s) for diagram number 182
      CALL VVS1_2_3_0(W(1,29),W(1,27),W(1,8),GC_20,GC_102,GC_28
     $ ,AMP(182))
C     Amplitude(s) for diagram number 183
      CALL VVVS1_2_0(W(1,3),W(1,33),W(1,7),W(1,8),GC_55,GC_62,AMP(183))
C     Amplitude(s) for diagram number 184
      CALL VVV1_0(W(1,2),W(1,33),W(1,7),GC_50,AMP(184))
C     Amplitude(s) for diagram number 185
      CALL VVV1_0(W(1,23),W(1,3),W(1,33),GC_4,AMP(185))
C     Amplitude(s) for diagram number 186
      CALL VVV1_0(W(1,3),W(1,33),W(1,10),GC_50,AMP(186))
C     Amplitude(s) for diagram number 187
      CALL VVVS1_2_0(W(1,3),W(1,4),W(1,15),W(1,8),GC_55,GC_62,AMP(187))
C     Amplitude(s) for diagram number 188
      CALL VVV1_0(W(1,2),W(1,4),W(1,15),GC_50,AMP(188))
C     Amplitude(s) for diagram number 189
      CALL VVV1_0(W(1,3),W(1,13),W(1,15),GC_50,AMP(189))
C     JAMPs contributing to orders ALL_ORDERS=1
      JAMP(1,1)=+AMP(1)+AMP(2)+AMP(3)+AMP(4)+AMP(5)+AMP(6)+AMP(7)
     $ +AMP(8)+AMP(9)+AMP(10)+AMP(11)+AMP(12)+AMP(13)+AMP(14)+AMP(15)
     $ +AMP(16)+AMP(17)+AMP(18)+AMP(19)+AMP(20)+AMP(21)+AMP(22)+AMP(23)
     $ +AMP(24)+AMP(25)+AMP(26)+AMP(27)+AMP(28)+AMP(29)+AMP(30)+AMP(31)
     $ +AMP(32)+AMP(33)+AMP(34)+AMP(35)+AMP(36)+AMP(37)+AMP(38)+AMP(39)
     $ +AMP(40)+AMP(41)+AMP(42)+AMP(43)+AMP(44)+AMP(45)+AMP(46)+AMP(47)
     $ +AMP(48)+AMP(49)+AMP(50)+AMP(51)+AMP(52)+AMP(53)+AMP(54)+AMP(55)
     $ +AMP(56)+AMP(57)+AMP(58)+AMP(59)+AMP(60)+AMP(61)+AMP(62)+AMP(63)
     $ +AMP(64)+AMP(65)+AMP(66)+AMP(67)+AMP(68)+AMP(69)+AMP(70)+AMP(71)
     $ +AMP(72)+AMP(73)+AMP(74)+AMP(75)+AMP(76)+AMP(77)+AMP(78)+AMP(79)
     $ +AMP(80)+AMP(81)+AMP(82)+AMP(83)+AMP(84)+AMP(85)+AMP(86)+AMP(87)
     $ +AMP(88)+AMP(89)+AMP(90)+AMP(91)+AMP(92)+AMP(93)+AMP(94)+AMP(95)
     $ +AMP(96)+AMP(97)+AMP(98)+AMP(99)+AMP(100)+AMP(101)+AMP(102)
     $ +AMP(103)+AMP(104)+AMP(105)+AMP(106)+AMP(107)+AMP(108)+AMP(109)
     $ +AMP(110)+AMP(111)+AMP(112)+AMP(113)+AMP(114)+AMP(115)+AMP(116)
     $ +AMP(117)+AMP(118)+AMP(119)+AMP(120)+AMP(121)+AMP(122)+AMP(123)
     $ +AMP(124)+AMP(125)+AMP(126)+AMP(127)+AMP(128)+AMP(129)+AMP(130)
     $ +AMP(131)+AMP(132)+AMP(133)+AMP(134)+AMP(135)+AMP(136)+AMP(137)
     $ +AMP(138)+AMP(139)+AMP(140)+AMP(141)+AMP(142)+AMP(143)+AMP(144)
     $ +AMP(145)+AMP(146)+AMP(147)+AMP(148)+AMP(149)+AMP(150)+AMP(151)
     $ +AMP(152)+AMP(153)+AMP(154)+AMP(155)+AMP(156)+AMP(157)+AMP(158)
     $ +AMP(159)+AMP(160)+AMP(161)+AMP(162)+AMP(163)+AMP(164)+AMP(165)
     $ +AMP(166)+AMP(167)+AMP(168)+AMP(169)+AMP(170)+AMP(171)+AMP(172)
     $ +AMP(173)+AMP(174)+AMP(175)+AMP(176)+AMP(177)+AMP(178)+AMP(179)
     $ +AMP(180)+AMP(181)+AMP(182)+AMP(183)+AMP(184)+AMP(185)+AMP(186)
     $ +AMP(187)+AMP(188)+AMP(189)

      MATRIX1 = 0.D0
      DO M = 1, NAMPSO
        DO I = 1, NCOLOR
          ZTEMP = (0.D0,0.D0)
          DO J = 1, NCOLOR
            ZTEMP = ZTEMP + CF(J,I)*JAMP(J,M)
          ENDDO
          DO N = 1, NAMPSO
            IF (CHOSEN_SO_CONFIGS(SQSOINDEX1(M,N))) THEN
              MATRIX1 = MATRIX1 + ZTEMP*DCONJG(JAMP(I,N))/DENOM(I)
            ENDIF
          ENDDO
        ENDDO
      ENDDO

      AMP2(2)=AMP2(2)+AMP(2)*DCONJG(AMP(2))
      AMP2(3)=AMP2(3)+AMP(3)*DCONJG(AMP(3))
      AMP2(5)=AMP2(5)+AMP(5)*DCONJG(AMP(5))
      AMP2(6)=AMP2(6)+AMP(6)*DCONJG(AMP(6))
      AMP2(8)=AMP2(8)+AMP(8)*DCONJG(AMP(8))
      AMP2(9)=AMP2(9)+AMP(9)*DCONJG(AMP(9))
      AMP2(13)=AMP2(13)+AMP(13)*DCONJG(AMP(13))
      AMP2(15)=AMP2(15)+AMP(15)*DCONJG(AMP(15))
      AMP2(16)=AMP2(16)+AMP(16)*DCONJG(AMP(16))
      AMP2(17)=AMP2(17)+AMP(17)*DCONJG(AMP(17))
      AMP2(18)=AMP2(18)+AMP(18)*DCONJG(AMP(18))
      AMP2(20)=AMP2(20)+AMP(20)*DCONJG(AMP(20))
      AMP2(21)=AMP2(21)+AMP(21)*DCONJG(AMP(21))
      AMP2(22)=AMP2(22)+AMP(22)*DCONJG(AMP(22))
      AMP2(23)=AMP2(23)+AMP(23)*DCONJG(AMP(23))
      AMP2(25)=AMP2(25)+AMP(25)*DCONJG(AMP(25))
      AMP2(26)=AMP2(26)+AMP(26)*DCONJG(AMP(26))
      AMP2(27)=AMP2(27)+AMP(27)*DCONJG(AMP(27))
      AMP2(30)=AMP2(30)+AMP(30)*DCONJG(AMP(30))
      AMP2(31)=AMP2(31)+AMP(31)*DCONJG(AMP(31))
      AMP2(32)=AMP2(32)+AMP(32)*DCONJG(AMP(32))
      AMP2(33)=AMP2(33)+AMP(33)*DCONJG(AMP(33))
      AMP2(34)=AMP2(34)+AMP(34)*DCONJG(AMP(34))
      AMP2(35)=AMP2(35)+AMP(35)*DCONJG(AMP(35))
      AMP2(36)=AMP2(36)+AMP(36)*DCONJG(AMP(36))
      AMP2(41)=AMP2(41)+AMP(41)*DCONJG(AMP(41))
      AMP2(42)=AMP2(42)+AMP(42)*DCONJG(AMP(42))
      AMP2(43)=AMP2(43)+AMP(43)*DCONJG(AMP(43))
      AMP2(44)=AMP2(44)+AMP(44)*DCONJG(AMP(44))
      AMP2(46)=AMP2(46)+AMP(46)*DCONJG(AMP(46))
      AMP2(47)=AMP2(47)+AMP(47)*DCONJG(AMP(47))
      AMP2(48)=AMP2(48)+AMP(48)*DCONJG(AMP(48))
      AMP2(50)=AMP2(50)+AMP(50)*DCONJG(AMP(50))
      AMP2(51)=AMP2(51)+AMP(51)*DCONJG(AMP(51))
      AMP2(52)=AMP2(52)+AMP(52)*DCONJG(AMP(52))
      AMP2(53)=AMP2(53)+AMP(53)*DCONJG(AMP(53))
      AMP2(54)=AMP2(54)+AMP(54)*DCONJG(AMP(54))
      AMP2(55)=AMP2(55)+AMP(55)*DCONJG(AMP(55))
      AMP2(56)=AMP2(56)+AMP(56)*DCONJG(AMP(56))
      AMP2(57)=AMP2(57)+AMP(57)*DCONJG(AMP(57))
      AMP2(58)=AMP2(58)+AMP(58)*DCONJG(AMP(58))
      AMP2(59)=AMP2(59)+AMP(59)*DCONJG(AMP(59))
      AMP2(60)=AMP2(60)+AMP(60)*DCONJG(AMP(60))
      AMP2(65)=AMP2(65)+AMP(65)*DCONJG(AMP(65))
      AMP2(66)=AMP2(66)+AMP(66)*DCONJG(AMP(66))
      AMP2(67)=AMP2(67)+AMP(67)*DCONJG(AMP(67))
      AMP2(68)=AMP2(68)+AMP(68)*DCONJG(AMP(68))
      AMP2(70)=AMP2(70)+AMP(70)*DCONJG(AMP(70))
      AMP2(71)=AMP2(71)+AMP(71)*DCONJG(AMP(71))
      AMP2(72)=AMP2(72)+AMP(72)*DCONJG(AMP(72))
      AMP2(74)=AMP2(74)+AMP(74)*DCONJG(AMP(74))
      AMP2(75)=AMP2(75)+AMP(75)*DCONJG(AMP(75))
      AMP2(76)=AMP2(76)+AMP(76)*DCONJG(AMP(76))
      AMP2(77)=AMP2(77)+AMP(77)*DCONJG(AMP(77))
      AMP2(79)=AMP2(79)+AMP(79)*DCONJG(AMP(79))
      AMP2(80)=AMP2(80)+AMP(80)*DCONJG(AMP(80))
      AMP2(82)=AMP2(82)+AMP(82)*DCONJG(AMP(82))
      AMP2(83)=AMP2(83)+AMP(83)*DCONJG(AMP(83))
      AMP2(85)=AMP2(85)+AMP(85)*DCONJG(AMP(85))
      AMP2(86)=AMP2(86)+AMP(86)*DCONJG(AMP(86))
      AMP2(91)=AMP2(91)+AMP(91)*DCONJG(AMP(91))
      AMP2(92)=AMP2(92)+AMP(92)*DCONJG(AMP(92))
      AMP2(93)=AMP2(93)+AMP(93)*DCONJG(AMP(93))
      AMP2(95)=AMP2(95)+AMP(95)*DCONJG(AMP(95))
      AMP2(96)=AMP2(96)+AMP(96)*DCONJG(AMP(96))
      AMP2(97)=AMP2(97)+AMP(97)*DCONJG(AMP(97))
      AMP2(99)=AMP2(99)+AMP(99)*DCONJG(AMP(99))
      AMP2(100)=AMP2(100)+AMP(100)*DCONJG(AMP(100))
      AMP2(101)=AMP2(101)+AMP(101)*DCONJG(AMP(101))
      AMP2(103)=AMP2(103)+AMP(103)*DCONJG(AMP(103))
      AMP2(104)=AMP2(104)+AMP(104)*DCONJG(AMP(104))
      AMP2(105)=AMP2(105)+AMP(105)*DCONJG(AMP(105))
      AMP2(106)=AMP2(106)+AMP(106)*DCONJG(AMP(106))
      AMP2(107)=AMP2(107)+AMP(107)*DCONJG(AMP(107))
      AMP2(108)=AMP2(108)+AMP(108)*DCONJG(AMP(108))
      AMP2(109)=AMP2(109)+AMP(109)*DCONJG(AMP(109))
      AMP2(114)=AMP2(114)+AMP(114)*DCONJG(AMP(114))
      AMP2(115)=AMP2(115)+AMP(115)*DCONJG(AMP(115))
      AMP2(116)=AMP2(116)+AMP(116)*DCONJG(AMP(116))
      AMP2(117)=AMP2(117)+AMP(117)*DCONJG(AMP(117))
      AMP2(118)=AMP2(118)+AMP(118)*DCONJG(AMP(118))
      AMP2(119)=AMP2(119)+AMP(119)*DCONJG(AMP(119))
      AMP2(120)=AMP2(120)+AMP(120)*DCONJG(AMP(120))
      AMP2(121)=AMP2(121)+AMP(121)*DCONJG(AMP(121))
      AMP2(122)=AMP2(122)+AMP(122)*DCONJG(AMP(122))
      AMP2(123)=AMP2(123)+AMP(123)*DCONJG(AMP(123))
      AMP2(124)=AMP2(124)+AMP(124)*DCONJG(AMP(124))
      AMP2(129)=AMP2(129)+AMP(129)*DCONJG(AMP(129))
      AMP2(130)=AMP2(130)+AMP(130)*DCONJG(AMP(130))
      AMP2(131)=AMP2(131)+AMP(131)*DCONJG(AMP(131))
      AMP2(132)=AMP2(132)+AMP(132)*DCONJG(AMP(132))
      AMP2(134)=AMP2(134)+AMP(134)*DCONJG(AMP(134))
      AMP2(135)=AMP2(135)+AMP(135)*DCONJG(AMP(135))
      AMP2(137)=AMP2(137)+AMP(137)*DCONJG(AMP(137))
      AMP2(138)=AMP2(138)+AMP(138)*DCONJG(AMP(138))
      AMP2(140)=AMP2(140)+AMP(140)*DCONJG(AMP(140))
      AMP2(141)=AMP2(141)+AMP(141)*DCONJG(AMP(141))
      AMP2(146)=AMP2(146)+AMP(146)*DCONJG(AMP(146))
      AMP2(147)=AMP2(147)+AMP(147)*DCONJG(AMP(147))
      AMP2(148)=AMP2(148)+AMP(148)*DCONJG(AMP(148))
      AMP2(149)=AMP2(149)+AMP(149)*DCONJG(AMP(149))
      AMP2(150)=AMP2(150)+AMP(150)*DCONJG(AMP(150))
      AMP2(151)=AMP2(151)+AMP(151)*DCONJG(AMP(151))
      AMP2(152)=AMP2(152)+AMP(152)*DCONJG(AMP(152))
      AMP2(153)=AMP2(153)+AMP(153)*DCONJG(AMP(153))
      AMP2(154)=AMP2(154)+AMP(154)*DCONJG(AMP(154))
      AMP2(155)=AMP2(155)+AMP(155)*DCONJG(AMP(155))
      AMP2(156)=AMP2(156)+AMP(156)*DCONJG(AMP(156))
      AMP2(160)=AMP2(160)+AMP(160)*DCONJG(AMP(160))
      AMP2(161)=AMP2(161)+AMP(161)*DCONJG(AMP(161))
      AMP2(162)=AMP2(162)+AMP(162)*DCONJG(AMP(162))
      AMP2(163)=AMP2(163)+AMP(163)*DCONJG(AMP(163))
      AMP2(164)=AMP2(164)+AMP(164)*DCONJG(AMP(164))
      AMP2(165)=AMP2(165)+AMP(165)*DCONJG(AMP(165))
      AMP2(169)=AMP2(169)+AMP(169)*DCONJG(AMP(169))
      AMP2(170)=AMP2(170)+AMP(170)*DCONJG(AMP(170))
      AMP2(171)=AMP2(171)+AMP(171)*DCONJG(AMP(171))
      AMP2(172)=AMP2(172)+AMP(172)*DCONJG(AMP(172))
      AMP2(173)=AMP2(173)+AMP(173)*DCONJG(AMP(173))
      AMP2(174)=AMP2(174)+AMP(174)*DCONJG(AMP(174))
      DO I = 1, NCOLOR
        DO M = 1, NAMPSO
          DO N = 1, NAMPSO
            IF (CHOSEN_SO_CONFIGS(SQSOINDEX1(M,N))) THEN
              JAMP2(I)=JAMP2(I)+DABS(DBLE(JAMP(I,M)*DCONJG(JAMP(I,N))))
            ENDIF
          ENDDO
        ENDDO
      ENDDO

      END

C     Set of functions to handle the array indices of the split orders


      INTEGER FUNCTION SQSOINDEX1(ORDERINDEXA, ORDERINDEXB)
C     
C     This functions plays the role of the interference matrix. It can
C      be hardcoded or 
C     made more elegant using hashtables if its execution speed ever
C      becomes a relevant
C     factor. From two split order indices, it return the
C      corresponding index in the squared 
C     order canonical ordering.
C     
C     CONSTANTS
C     

      INTEGER    NSO, NSQUAREDSO, NAMPSO
      PARAMETER (NSO=1, NSQUAREDSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERINDEXA, ORDERINDEXB
C     
C     LOCAL VARIABLES
C     
      INTEGER I, SQORDERS(NSO)
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      DATA (AMPSPLITORDERS(  1,I),I=  1,  1) /    1/
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     FUNCTION
C     
      INTEGER SOINDEX_FOR_SQUARED_ORDERS1
C     
C     BEGIN CODE
C     
      DO I=1,NSO
        SQORDERS(I)=AMPSPLITORDERS(ORDERINDEXA,I)+AMPSPLITORDERS(ORDERI
     $NDEXB,I)
      ENDDO
      SQSOINDEX1=SOINDEX_FOR_SQUARED_ORDERS1(SQORDERS)
      END

      INTEGER FUNCTION SOINDEX_FOR_SQUARED_ORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the squared
C      split orders list passed in argument which corresponds to the
C      values of the following list of couplings (and in this order).
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO, NAMPSO
      PARAMETER (NSO=1, NSQSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER SQSPLITORDERS(NSQSO,NSO)
      DATA (SQSPLITORDERS(  1,I),I=  1,  1) /    2/
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NSQSO
        DO J=1,NSO
          IF (ORDERS(J).NE.SQSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_SQUARED_ORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping in function'
      WRITE(*,*) 'SOINDEX_FOR_SQUARED_ORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

      SUBROUTINE GET_NSQSO_BORN1(NSQSO)
C     
C     Simple subroutine returning the number of squared split order
C     contributions returned when calling smatrix_split_orders 
C     

      INTEGER    NSQUAREDSO
      PARAMETER  (NSQUAREDSO=1)

      INTEGER NSQSO

      NSQSO=NSQUAREDSO

      END

C     This is the inverse subroutine of SOINDEX_FOR_SQUARED_ORDERS.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_SQUARED_ORDERS_FOR_SOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the squared
C      split order index in argument. Order values correspond to
C      following list of couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NSQSO
      PARAMETER (NSO=1, NSQSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER SQPLITORDERS(NSQSO,NSO)
      COMMON/SQPLITORDERS1/SQPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NSQSO) THEN
        DO I=1,NSO
          ORDERS(I) =  SQPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_SQUARED_ORDERS_FOR_SOIN'
     $ //'DEX1'
      WRITE(*,*) 'Could not find squared orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This is the inverse subroutine of getting amplitude SO orders.
C      Not directly useful, but provided nonetheless.
      SUBROUTINE GET_ORDERS_FOR_AMPSOINDEX1(SOINDEX,ORDERS)
C     
C     This functions returns the orders identified by the split order
C      index in argument. Order values correspond to following list of
C      couplings (and in this order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER SOINDEX, ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      IF (SOINDEX.GT.0.AND.SOINDEX.LE.NAMPSO) THEN
        DO I=1,NSO
          ORDERS(I) =  AMPSPLITORDERS(SOINDEX,I)
        ENDDO
        RETURN
      ENDIF

      WRITE(*,*) 'ERROR:: Stopping function GET_ORDERS_FOR_AMPSOINDEX1'
      WRITE(*,*) 'Could not find amplitude split orders index ',SOINDEX
      STOP

      END SUBROUTINE

C     This function is not directly useful, but included for
C      completeness
      INTEGER FUNCTION SOINDEX_FOR_AMPORDERS1(ORDERS)
C     
C     This functions returns the integer index identifying the
C      amplitude split orders passed in argument which correspond to
C      the values of the following list of couplings (and in this
C      order):
C     []
C     
C     CONSTANTS
C     
      INTEGER    NSO, NAMPSO
      PARAMETER (NSO=1, NAMPSO=1)
C     
C     ARGUMENTS
C     
      INTEGER ORDERS(NSO)
C     
C     LOCAL VARIABLES
C     
      INTEGER I,J
      INTEGER AMPSPLITORDERS(NAMPSO,NSO)
      COMMON/AMPSPLITORDERS1/AMPSPLITORDERS
C     
C     BEGIN CODE
C     
      DO I=1,NAMPSO
        DO J=1,NSO
          IF (ORDERS(J).NE.AMPSPLITORDERS(I,J)) GOTO 1009
        ENDDO
        SOINDEX_FOR_AMPORDERS1 = I
        RETURN
 1009   CONTINUE
      ENDDO

      WRITE(*,*) 'ERROR:: Stopping function SOINDEX_FOR_AMPORDERS1'
      WRITE(*,*) 'Could not find squared orders ',(ORDERS(I),I=1,NSO)
      STOP

      END

